name: Continuous Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ]
  workflow_call:

jobs:
  backend_tests:
    name: Backend Lint & Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install Tauri system dependencies (for Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup2.4-dev \
            libjavascriptcoregtk-4.1-dev

      # DÜZELTME: Sadece .pc dosyalarını değil, .so kütüphane dosyalarını da linkliyoruz.
      - name: Create symlinks for webkit version compatibility
        run: |
          cd /usr/lib/x86_64-linux-gnu/
          # pkg-config için linkler
          sudo ln -s webkit2gtk-4.1.pc webkit2gtk-4.0.pc
          sudo ln -s javascriptcoregtk-4.1.pc javascriptcoregtk-4.0.pc
          # Linker için linkler
          sudo ln -s libwebkit2gtk-4.1.so libwebkit2gtk-4.0.so
          sudo ln -s libjavascriptcoregtk-4.1.so libjavascriptcoregtk-4.0.so

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Run linter (clippy)
        run: cargo clippy --workspace --all-targets -- -D warnings
      - name: Run unit tests
        run: cargo test --workspace

  # ... (frontend_build ve integration_test adımları aynı kalacak)
  frontend_build:
    name: Frontend Build & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies and build
        working-directory: ./web
        run: |
          npm ci
          npm run build

  integration_test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [backend_tests, frontend_build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run End-to-End tests
        working-directory: ./tests
        run: docker compose -f docker-compose.integration.yml up --build --exit-code-from tester