name: Continuous Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "**" ]
  workflow_call:

jobs:
  backend_tests:
    name: Backend Lint & Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install Tauri system dependencies (for Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup2.4-dev \
            libjavascriptcoregtk-4.1-dev
      - name: Create symlinks for webkit version compatibility
        run: |
          cd /usr/lib/x86_64-linux-gnu
          sudo ln -s libwebkit2gtk-4.1.so libwebkit2gtk-4.0.so
          sudo ln -s libjavascriptcoregtk-4.1.so libjavascriptcoregtk-4.0.so
          cd pkgconfig
          sudo ln -s webkit2gtk-4.1.pc webkit2gtk-4.0.pc
          sudo ln -s javascriptcoregtk-4.1.pc javascriptcoregtk-4.0.pc
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run linter (clippy)
        run: cargo clippy --workspace --all-targets -- -D warnings
      - name: Run unit tests
        run: cargo test --workspace

  frontend_build:
    name: Frontend Build & Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install dependencies and build
        working-directory: ./web
        run: |
          npm ci
          npm run build

  integration_test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend_tests, frontend_build]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Start services via Docker Compose
        run: docker compose -f tests/docker-compose.integration.yml up --build -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for 'app' service to be healthy..."
          timeout 60s bash -c 'until docker ps | grep "sentiric-app-test" | grep "(healthy)"; do sleep 2; done'

      # --- HER TEST SENARYOSU Ä°Ã‡Ä°N AYRI ADIMLAR ---
      - name: ðŸ§ª Run DNS Test
        run: docker compose -f tests/docker-compose.integration.yml exec tester /tests/test-runner.sh /tests/scenarios/01_dns.test.sh

      - name: ðŸ§ª Run Cache Test
        run: docker compose -f tests/docker-compose.integration.yml exec tester /tests/test-runner.sh /tests/scenarios/02_cache.test.sh

      - name: ðŸ§ª Run Rule (Block) Test
        run: docker compose -f tests/docker-compose.integration.yml exec tester /tests/test-runner.sh /tests/scenarios/03_rule_block.test.sh

      - name: ðŸ§ª Run Rule (Bypass) Test
        run: docker compose -f tests/docker-compose.integration.yml exec tester /tests/test-runner.sh /tests/scenarios/04_rule_bypass.test.sh
      
      - name: ðŸ§ª Run DNS End-to-End (Block) Test
        run: >
          docker compose -f tests/docker-compose.integration.yml
          run --rm dns-tester
          /tests/test-runner.sh /tests/scenarios/05_dns_block.test.sh

      - name: ðŸ§ª Run DNS End-to-End (Bypass) Test
        run: >
          docker compose -f tests/docker-compose.integration.yml
          run --rm dns-tester
          /tests/test-runner.sh /tests/scenarios/06_dns_bypass.test.sh

      # --- TEMÄ°ZLÄ°K ---
      - name: Show logs on failure
        if: failure()
        run: docker compose -f tests/docker-compose.integration.yml logs

      - name: Stop services
        if: always()
        run: docker compose -f tests/docker-compose.integration.yml down